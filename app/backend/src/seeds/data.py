"""Дефолтные данные для сидов."""

from datetime import datetime, timedelta
from typing import List, Dict, Any

from ..domain.models import (
    User, Competency, ReviewCycle, Template, 
    UserRole, Platform, ReviewType
)


def get_default_users() -> List[Dict[str, Any]]:
    """Получение дефолтных пользователей."""
    return [
        {
            "handle": "admin",
            "email": "admin@qa-assessment.com",
            "role": UserRole.ADMIN,
            "platform": Platform.WEB,
            "is_technical": True
        },
        {
            "handle": "qa_lead",
            "email": "qa_lead@company.com",
            "role": UserRole.ADMIN,
            "platform": Platform.SLACK,
            "is_technical": False
        },
        {
            "handle": "qa_engineer_1",
            "email": "qa1@company.com",
            "role": UserRole.USER,
            "platform": Platform.SLACK,
            "is_technical": False
        },
        {
            "handle": "qa_engineer_2",
            "email": "qa2@company.com",
            "role": UserRole.USER,
            "platform": Platform.TELEGRAM,
            "is_technical": False
        },
        {
            "handle": "qa_automation",
            "email": "qa_auto@company.com",
            "role": UserRole.USER,
            "platform": Platform.WEB,
            "is_technical": False
        }
    ]


def get_default_competencies() -> List[Dict[str, Any]]:
    """Получение дефолтных компетенций."""
    return [
        {
            "key": "analytical_thinking",
            "title": "Аналитическое мышление",
            "description": "Способность анализировать проблемы, находить корневые причины и предлагать эффективные решения"
        },
        {
            "key": "bug_reports",
            "title": "Написание баг-репортов",
            "description": "Качество и детальность баг-репортов, включая шаги воспроизведения, ожидаемый и фактический результат"
        },
        {
            "key": "test_planning",
            "title": "Планирование тестирования",
            "description": "Способность создавать эффективные планы тестирования, определять приоритеты и покрытие"
        },
        {
            "key": "automation_skills",
            "title": "Навыки автоматизации",
            "description": "Умение писать и поддерживать автоматизированные тесты, знание инструментов и фреймворков"
        },
        {
            "key": "communication",
            "title": "Коммуникация",
            "description": "Эффективная коммуникация с командой разработки, менеджментом и другими стейкхолдерами"
        },
        {
            "key": "domain_knowledge",
            "title": "Предметная экспертиза",
            "description": "Глубокое понимание бизнес-логики продукта и пользовательских сценариев"
        },
        {
            "key": "performance_testing",
            "title": "Нагрузочное тестирование",
            "description": "Навыки проведения нагрузочного, стрессового и объемного тестирования"
        },
        {
            "key": "security_testing",
            "title": "Тестирование безопасности",
            "description": "Понимание принципов безопасности и умение проводить тестирование на уязвимости"
        },
        {
            "key": "api_testing",
            "title": "Тестирование API",
            "description": "Навыки тестирования REST/GraphQL API, работа с Postman, Swagger и другими инструментами"
        },
        {
            "key": "mobile_testing",
            "title": "Мобильное тестирование",
            "description": "Опыт тестирования мобильных приложений на iOS и Android"
        }
    ]


def get_default_templates() -> List[Dict[str, Any]]:
    """Получение дефолтных шаблонов ответов."""
    return [
        {
            "competency_key": "analytical_thinking",
            "title": "Шаблон для аналитического мышления",
            "content": """Опишите конкретный случай, когда вы анализировали сложную проблему:

1. **Проблема**: Опишите проблему, которую нужно было решить
2. **Анализ**: Как вы подходили к анализу? Какие данные собирали?
3. **Решение**: Какое решение предложили и почему?
4. **Результат**: Какой был итоговый результат?

Пример структуры ответа:
"При тестировании платежной системы обнаружил, что транзакции иногда не проходят. Проанализировал логи, выявил паттерн в определенное время суток, связал с нагрузкой на внешний API. Предложил добавить retry-механизм и мониторинг. В результате количество неуспешных транзакций снизилось на 80%."
"""
        },
        {
            "competency_key": "bug_reports",
            "title": "Шаблон для баг-репортов",
            "content": """Опишите пример качественного баг-репорта, который вы создали:

**Структура ответа:**
1. **Краткое описание**: Суть проблемы в одном предложении
2. **Шаги воспроизведения**: Пошаговые действия
3. **Ожидаемый результат**: Что должно было произойти
4. **Фактический результат**: Что произошло на самом деле
5. **Дополнительная информация**: Логи, скриншоты, версии, окружение

Пример:
"При загрузке файла размером >10MB приложение зависает. Шаги: 1) Открыть форму загрузки, 2) Выбрать файл 15MB, 3) Нажать 'Загрузить'. Ожидалось: прогресс-бар и успешная загрузка. Фактически: приложение не отвечает 30+ секунд. Версия: 2.1.3, браузер: Chrome 91."
"""
        },
        {
            "competency_key": "test_planning",
            "title": "Шаблон для планирования тестирования",
            "content": """Опишите, как вы планировали тестирование нового функционала:

**Структура ответа:**
1. **Анализ требований**: Как вы анализировали требования?
2. **Приоритизация**: Как определяли приоритеты тестирования?
3. **Покрытие**: Какие типы тестирования планировали?
4. **Ресурсы**: Как оценивали время и ресурсы?
5. **Риски**: Какие риски учитывали?

Пример:
"Для нового модуля аналитики проанализировал user stories, выделил критичные пути пользователей. Приоритизировал smoke-тесты для основных сценариев, затем функциональные тесты. Запланировал 40% времени на позитивные сценарии, 60% на негативные и граничные случаи. Учел риски интеграции с внешними API."
"""
        },
        {
            "competency_key": "automation_skills",
            "title": "Шаблон для навыков автоматизации",
            "content": """Опишите проект автоматизации, в котором вы участвовали:

**Структура ответа:**
1. **Задача**: Что нужно было автоматизировать?
2. **Технологии**: Какие инструменты и фреймворки использовали?
3. **Архитектура**: Как организовали код и тесты?
4. **Результат**: Какой эффект получили?
5. **Поддержка**: Как обеспечивали поддержку автоматизации?

Пример:
"Автоматизировал регрессионное тестирование API. Использовал Python + pytest + requests. Создал модульную архитектуру с отдельными классами для разных API endpoints. Покрыл 80% критичных сценариев. Время выполнения регрессии сократилось с 4 часов до 30 минут. Настроил CI/CD интеграцию с Jenkins."
"""
        },
        {
            "competency_key": "communication",
            "title": "Шаблон для коммуникации",
            "content": """Опишите ситуацию, когда ваша коммуникация помогла решить проблему:

**Структура ответа:**
1. **Ситуация**: Какая была проблема или задача?
2. **Стейкхолдеры**: С кем нужно было взаимодействовать?
3. **Подход**: Как вы выстраивали коммуникацию?
4. **Результат**: Какой был итог?
5. **Уроки**: Что вынесли из этой ситуации?

Пример:
"Обнаружил критичный баг в продакшене. Сначала собрал всю информацию, подготовил детальный отчет. Связался с тимлидом разработки, объяснил приоритет и бизнес-влияние. Совместно с DevOps быстро развернули hotfix. Благодаря четкой коммуникации баг был исправлен за 2 часа вместо обычных 8."
"""
        }
    ]


def get_default_review_cycles() -> List[Dict[str, Any]]:
    """Получение дефолтных циклов ревью."""
    now = datetime.utcnow()
    
    return [
        {
            "name": "Q1 2024 Performance Review",
            "description": "Ежеквартальная оценка производительности за первый квартал 2024",
            "start_date": now - timedelta(days=30),
            "end_date": now + timedelta(days=30),
            "is_active": True
        },
        {
            "name": "Q2 2024 Performance Review",
            "description": "Ежеквартальная оценка производительности за второй квартал 2024",
            "start_date": now + timedelta(days=60),
            "end_date": now + timedelta(days=120),
            "is_active": False
        },
        {
            "name": "Annual 2024 Review",
            "description": "Годовая оценка за 2024 год",
            "start_date": now + timedelta(days=300),
            "end_date": now + timedelta(days=330),
            "is_active": False
        }
    ]


def get_default_encryption_key() -> str:
    """Получение дефолтного ключа шифрования для разработки."""
    # ВНИМАНИЕ: Это ключ только для разработки!
    # В продакшене должен быть сгенерирован уникальный ключ
    return "dev-encryption-key-12345678901234567890123456789012"


def get_seed_statistics() -> Dict[str, int]:
    """Получение статистики по сидам."""
    return {
        "users": len(get_default_users()),
        "competencies": len(get_default_competencies()),
        "templates": len(get_default_templates()),
        "review_cycles": len(get_default_review_cycles()),
        "admin_users": len([u for u in get_default_users() if u["role"] == UserRole.ADMIN]),
        "technical_users": len([u for u in get_default_users() if u.get("is_technical", False)])
    }
