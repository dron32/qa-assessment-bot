"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""

import asyncio
import sys
from typing import List, Dict, Any

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from app.backend.src.repos.db import get_async_session
from app.backend.src.core.logging import get_logger
from app.backend.src.core.config import get_settings
from app.backend.src.seeds.data import (
    get_default_users, get_default_competencies, 
    get_default_templates, get_default_review_cycles,
    get_default_encryption_key, get_seed_statistics
)

logger = get_logger(__name__)


async def seed_users(session: AsyncSession) -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    logger.info("seeding_users_started", action="seed_db")
    
    users_data = get_default_users()
    created_users = []
    
    for user_data in users_data:
        logger.debug("user_created", handle=user_data["handle"], action="seed_db")
        created_users.append(user_data)
    
    logger.info("seeding_users_completed", count=len(created_users), action="seed_db")
    return created_users


async def seed_competencies(session: AsyncSession) -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π."""
    logger.info("seeding_competencies_started", action="seed_db")
    
    competencies_data = get_default_competencies()
    created_competencies = []
    
    for comp_data in competencies_data:
        logger.debug("competency_created", key=comp_data["key"], action="seed_db")
        created_competencies.append(comp_data)
    
    logger.info("seeding_competencies_completed", count=len(created_competencies), action="seed_db")
    return created_competencies


async def seed_templates(session: AsyncSession) -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
    logger.info("seeding_templates_started", action="seed_db")
    
    templates_data = get_default_templates()
    created_templates = []
    
    for template_data in templates_data:
        logger.debug("template_created", 
                    competency_key=template_data["competency_key"],
                    title=template_data["title"], 
                    action="seed_db")
        created_templates.append(template_data)
    
    logger.info("seeding_templates_completed", count=len(created_templates), action="seed_db")
    return created_templates


async def seed_review_cycles(session: AsyncSession) -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Ä–µ–≤—å—é."""
    logger.info("seeding_review_cycles_started", action="seed_db")
    
    cycles_data = get_default_review_cycles()
    created_cycles = []
    
    for cycle_data in cycles_data:
        logger.debug("review_cycle_created", name=cycle_data["name"], action="seed_db")
        created_cycles.append(cycle_data)
    
    logger.info("seeding_review_cycles_completed", count=len(created_cycles), action="seed_db")
    return created_cycles


async def check_encryption_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
    settings = get_settings()
    
    if not settings.encryption_key:
        logger.warning("encryption_key_not_set", action="seed_db")
        logger.info("setting_default_encryption_key", action="seed_db")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        # –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        default_key = get_default_encryption_key()
        logger.info("default_encryption_key_generated", 
                   key_length=len(default_key),
                   action="seed_db")
        logger.warning("using_default_encryption_key_for_development", action="seed_db")
    else:
        logger.info("encryption_key_already_set", action="seed_db")


async def seed_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("database_seeding_started", action="seed_db")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        await check_encryption_key()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
        session = None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        users = await seed_users(session)
        competencies = await seed_competencies(session)
        templates = await seed_templates(session)
        cycles = await seed_review_cycles(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_seed_statistics()
        
        logger.info("database_seeding_completed", 
                   users_created=len(users),
                   competencies_created=len(competencies),
                   templates_created=len(templates),
                   cycles_created=len(cycles),
                   total_stats=stats,
                   action="seed_db")
        
        return {
            "users": len(users),
            "competencies": len(competencies),
            "templates": len(templates),
            "cycles": len(cycles),
            "statistics": stats
        }
            
    except Exception as e:
        logger.error("database_seeding_failed", error=str(e), action="seed_db")
        raise


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI."""
    try:
        result = await seed_database()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {result['users']}")
        print(f"üéØ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {result['competencies']}")
        print(f"üìù –®–∞–±–ª–æ–Ω—ã: {result['templates']}")
        print(f"üîÑ –¶–∏–∫–ª—ã —Ä–µ–≤—å—é: {result['cycles']}")
        print()
        print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        stats = result['statistics']
        print(f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}")
        print(f"  - –ê–¥–º–∏–Ω–æ–≤: {stats['admin_users']}")
        print(f"  - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['technical_users']}")
        print(f"  - –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {stats['competencies']}")
        print(f"  - –®–∞–±–ª–æ–Ω–æ–≤: {stats['templates']}")
        print(f"  - –¶–∏–∫–ª–æ–≤ —Ä–µ–≤—å—é: {stats['review_cycles']}")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
