from __future__ import annotations

import json
import logging
import os
from typing import Any, Dict

from slack_bolt import App
from slack_bolt.adapter.fastapi import SlackRequestHandler
from fastapi import APIRouter, Request

from .fsm import ReviewSession, ReviewState, fsm_store
from ..llm.client import LlmClient

logger = logging.getLogger(__name__)

# FastAPI router –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
router = APIRouter(prefix="/bot/slack")

# Slack Bolt app - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
def create_slack_app():
    token = os.getenv("SLACK_BOT_TOKEN")
    secret = os.getenv("SLACK_SIGNING_SECRET")
    if token and secret and token != "xoxb-dummy":
        return App(token=token, signing_secret=secret)
    return None

# –°–æ–∑–¥–∞—ë–º app —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã
slack_app = create_slack_app()

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
if slack_app is None:
    class DummyApp:
        def command(self, cmd):
            def decorator(func):
                return func
            return decorator
        
        def event(self, event):
            def decorator(func):
                return func
            return decorator
    
    slack_app = DummyApp()


@slack_app.command("/self_review")
def handle_self_review(ack, respond, command):
    ack()
    user_id = command["user_id"]
    
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
    session = ReviewSession(
        user_id=user_id,
        platform="slack",
        review_type="self"
    )
    session.state = ReviewState.SELECTING_CYCLE
    fsm_store.save_session(session)
    
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç ‚â§5—Å
    respond("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Ç–µ–∫—É—â–∏–π' –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ.")


@slack_app.command("/peer_review")
def handle_peer_review(ack, respond, command):
    ack()
    user_id = command["user_id"]
    text = command.get("text", "").strip()
    
    if not text or not text.startswith("<@"):
        respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/peer_review @username`")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ @username
    subject_id = text.replace("<@", "").replace(">", "")
    
    session = ReviewSession(
        user_id=user_id,
        platform="slack",
        review_type="peer",
        subject_id=subject_id
    )
    session.state = ReviewState.SELECTING_CYCLE
    fsm_store.save_session(session)
    
    respond(f"üë• –ù–∞—á–∏–Ω–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–æ–ª–ª–µ–≥–∏ <@{subject_id}>! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª –æ—Ü–µ–Ω–∫–∏.")


@slack_app.command("/summary")
def handle_summary(ack, respond, command):
    ack()
    user_id = command["user_id"]
    text = command.get("text", "").strip()
    
    if not text or not text.startswith("<@"):
        respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/summary @username`")
        return
    
    subject_id = text.replace("<@", "").replace(">", "")
    
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç + —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    respond(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–¥–∫—É –¥–ª—è <@{subject_id}>...")
    
    # –ó–¥–µ—Å—å –±—ã –≤—ã–∑–≤–∞–ª–∏ Celery task –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    # –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ Slack API
    try:
        llm = LlmClient()
        result = llm.generate_summary(
            user_context=f"slack_user:{subject_id}",
            trace_id=f"slack-sum-{user_id}-{subject_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        summary_text = f"""
*–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*
{chr(10).join(f"‚Ä¢ {s}" for s in result.strengths)}

*–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞:*
{chr(10).join(f"‚Ä¢ {s}" for s in result.areas_for_growth)}

*–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*
{chr(10).join(f"‚Ä¢ {s}" for s in result.next_steps)}
"""
        respond(summary_text)
        
    except Exception as e:
        logger.error(f"Summary generation failed: {e}")
        respond("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@slack_app.event("app_mention")
def handle_mention(event, say):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ @mentions –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    user_id = event["user"]
    text = event.get("text", "").lower()
    
    session = fsm_store.get_session(user_id, "slack")
    if not session:
        say("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã `/self_review`, `/peer_review @user` –∏–ª–∏ `/summary @user`")
        return
    
    if session.state == ReviewState.SELECTING_CYCLE:
        if "—Ç–µ–∫—É—â–∏–π" in text or "current" in text:
            session.cycle_id = 1  # –ó–∞–≥–ª—É—à–∫–∞
            session.state = ReviewState.ANSWERING_COMPETENCIES
            fsm_store.save_session(session)
            say("‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: *–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ*")
        else:
            say("‚ùì –í–≤–µ–¥–∏—Ç–µ '—Ç–µ–∫—É—â–∏–π' –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ü–µ–Ω–∫–∏")
    
    elif session.state == ReviewState.ANSWERING_COMPETENCIES:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        competency = "analytical_thinking"  # –ó–∞–≥–ª—É—à–∫–∞
        session.answers[competency] = text
        fsm_store.save_session(session)
        
        if len(session.answers) >= 3:  # –ó–∞–≥–ª—É—à–∫–∞: 3 –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
            session.state = ReviewState.PREVIEW
            fsm_store.save_session(session)
            say("üìù –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ '–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥' –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
        else:
            say("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: *–ö–∞—á–µ—Å—Ç–≤–æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤*")
    
    elif session.state == ReviewState.PREVIEW:
        if "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥" in text or "refine" in text:
            session.state = ReviewState.REFINING
            fsm_store.save_session(session)
            
            # LLM —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
            try:
                llm = LlmClient()
                all_text = " ".join(session.answers.values())
                result = llm.refine_text(text=all_text, trace_id=f"slack-refine-{user_id}")
                
                say(f"‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:\n{result.refined}\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n" + 
                    "\n".join(f"‚Ä¢ {hint}" for hint in result.improvement_hints))
                
                session.state = ReviewState.SUBMITTED
                fsm_store.save_session(session)
                say("üéâ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                
            except Exception as e:
                logger.error(f"Refinement failed: {e}")
                say("‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞. –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –µ—Å—Ç—å.")
                session.state = ReviewState.SUBMITTED
                fsm_store.save_session(session)
        
        elif "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in text or "submit" in text:
            session.state = ReviewState.SUBMITTED
            fsm_store.save_session(session)
            say("üéâ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            preview = "\n".join(f"*{k}:* {v}" for k, v in session.answers.items())
            say(f"üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{preview}\n\n–í–≤–µ–¥–∏—Ç–µ '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥' –∏–ª–∏ '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å'")


# FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
handler = SlackRequestHandler(slack_app) if hasattr(slack_app, 'client') else None


@router.post("/events")
async def slack_events(request: Request):
    if handler:
        return await handler.handle(request)
    return {"ok": True, "message": "Slack bot not configured"}
