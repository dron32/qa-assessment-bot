from __future__ import annotations

import logging
import os
from typing import Any, Dict

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from fastapi import APIRouter, Request, HTTPException

from .fsm import ReviewSession, ReviewState, fsm_store
from ..llm.client import LlmClient

logger = logging.getLogger(__name__)

# FastAPI router –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
router = APIRouter(prefix="/telegram")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - DI)
tg_app: Application | None = None


async def start_self_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    
    session = ReviewSession(
        user_id=user_id,
        platform="telegram",
        review_type="self"
    )
    session.state = ReviewState.SELECTING_CYCLE
    fsm_store.save_session(session)
    
    await update.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Ç–µ–∫—É—â–∏–π' –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ.")


async def start_peer_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username: `/peer_review @username`")
        return
    
    username = context.args[0].replace("@", "")
    
    session = ReviewSession(
        user_id=user_id,
        platform="telegram",
        review_type="peer",
        subject_id=username
    )
    session.state = ReviewState.SELECTING_CYCLE
    fsm_store.save_session(session)
    
    await update.message.reply_text(f"üë• –ù–∞—á–∏–Ω–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–æ–ª–ª–µ–≥–∏ @{username}! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª –æ—Ü–µ–Ω–∫–∏.")


async def generate_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username: `/summary @username`")
        return
    
    username = context.args[0].replace("@", "")
    
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
    await update.message.reply_text(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–¥–∫—É –¥–ª—è @{username}...")
    
    try:
        llm = LlmClient()
        result = llm.generate_summary(
            user_context=f"tg_user:{username}",
            trace_id=f"tg-sum-{user_id}-{username}"
        )
        
        summary_text = f"""
*–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*
{chr(10).join(f"‚Ä¢ {s}" for s in result.strengths)}

*–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞:*
{chr(10).join(f"‚Ä¢ {s}" for s in result.areas_for_growth)}

*–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*
{chr(10).join(f"‚Ä¢ {s}" for s in result.next_steps)}
"""
        await update.message.reply_text(summary_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Summary generation failed: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è FSM"""
    user_id = str(update.effective_user.id)
    text = update.message.text.lower()
    
    session = fsm_store.get_session(user_id, "telegram")
    if not session:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /self_review, /peer_review @user –∏–ª–∏ /summary @user")
        return
    
    if session.state == ReviewState.SELECTING_CYCLE:
        if "—Ç–µ–∫—É—â–∏–π" in text or "current" in text:
            session.cycle_id = 1  # –ó–∞–≥–ª—É—à–∫–∞
            session.state = ReviewState.ANSWERING_COMPETENCIES
            fsm_store.save_session(session)
            await update.message.reply_text("‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: *–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ*", parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ùì –í–≤–µ–¥–∏—Ç–µ '—Ç–µ–∫—É—â–∏–π' –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ü–µ–Ω–∫–∏")
    
    elif session.state == ReviewState.ANSWERING_COMPETENCIES:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        competency = "analytical_thinking"  # –ó–∞–≥–ª—É—à–∫–∞
        session.answers[competency] = text
        fsm_store.save_session(session)
        
        if len(session.answers) >= 3:  # –ó–∞–≥–ª—É—à–∫–∞: 3 –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
            session.state = ReviewState.PREVIEW
            fsm_store.save_session(session)
            await update.message.reply_text("üìù –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ '–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥' –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
        else:
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: *–ö–∞—á–µ—Å—Ç–≤–æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤*", parse_mode="Markdown")
    
    elif session.state == ReviewState.PREVIEW:
        if "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥" in text or "refine" in text:
            session.state = ReviewState.REFINING
            fsm_store.save_session(session)
            
            # LLM —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
            try:
                llm = LlmClient()
                all_text = " ".join(session.answers.values())
                result = llm.refine_text(text=all_text, trace_id=f"tg-refine-{user_id}")
                
                await update.message.reply_text(
                    f"‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:\n{result.refined}\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n" + 
                    "\n".join(f"‚Ä¢ {hint}" for hint in result.improvement_hints)
                )
                
                session.state = ReviewState.SUBMITTED
                fsm_store.save_session(session)
                await update.message.reply_text("üéâ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                
            except Exception as e:
                logger.error(f"Refinement failed: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞. –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –µ—Å—Ç—å.")
                session.state = ReviewState.SUBMITTED
                fsm_store.save_session(session)
        
        elif "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in text or "submit" in text:
            session.state = ReviewState.SUBMITTED
            fsm_store.save_session(session)
            await update.message.reply_text("üéâ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            preview = "\n".join(f"*{k}:* {v}" for k, v in session.answers.items())
            await update.message.reply_text(f"üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{preview}\n\n–í–≤–µ–¥–∏—Ç–µ '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥' –∏–ª–∏ '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å'", parse_mode="Markdown")


def create_telegram_app() -> Application | None:
    """–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if token and token != "dummy-token":
        app = Application.builder().token(token).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("self_review", start_self_review))
        app.add_handler(CommandHandler("peer_review", start_peer_review))
        app.add_handler(CommandHandler("summary", generate_summary))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        return app
    return None


@router.post("/webhook")
async def telegram_webhook(request: Request):
    """–í–µ–±—Ö—É–∫ –¥–ª—è Telegram"""
    global tg_app
    
    if not tg_app:
        tg_app = create_telegram_app()
    
    if not tg_app:
        return {"ok": True, "message": "Telegram bot not configured"}
    
    try:
        body = await request.json()
        update = Update.de_json(body, tg_app.bot)
        
        if update:
            await tg_app.process_update(update)
        
        return {"ok": True}
    
    except Exception as e:
        logger.error(f"Telegram webhook error: {e}")
        raise HTTPException(status_code=500, detail="Webhook processing failed")
